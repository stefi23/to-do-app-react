{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","console","log","setState","target","name","value","handleSubmit","preventDefault","list","state","toDoList","push","newTask","handleDelete","pop","completedTask","done","className","style","color","class","type","this","placeholder","onChange","onClick","map","task","index","key","Taskchecked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RA8GeA,G,kBA1Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,aAAe,SAAAC,GACbC,QAAQC,IAAI,QACZ,EAAKC,SAAL,eACGH,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,SAZnB,EAgBnBC,aAAe,SAAAP,GACbC,QAAQC,IAAI,WACZF,EAAMQ,iBACN,IAAIC,EAAI,YAAO,EAAKC,MAAMC,UAC1BF,EAAKG,KAAK,EAAKF,MAAMG,SACrB,EAAKV,SAAS,CACZQ,SAAUF,EACVI,QAAS,MAvBM,EA2BnBC,aAAe,SAAAD,GACb,IAAIJ,EAAI,YAAO,EAAKC,MAAMC,UAC1BF,EAAKM,IAAI,EAAKL,MAAMG,SACpB,EAAKV,SAAS,CACZQ,SAAUF,EACVI,QAAS,MAhCM,EAoCnBG,cAAgB,WACdf,QAAQC,IAAI,WACZ,EAAKC,SAAS,CACZc,MAAM,KArCR,EAAKP,MAAQ,CACXC,SAAU,CAAC,WAAY,eAAgB,QACvCE,QAAS,GACTI,MAAM,GALS,E,sEA2CT,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yDACb,wBAAIC,MAAO,CAAEC,MAAO,UAAYF,UAAU,QAA1C,cAGA,6BACA,8BACE,yBAAKG,MAAM,OACT,yBAAKA,MAAM,OACT,2BACEC,KAAK,OACLjB,KAAK,UACLC,MAAOiB,KAAKb,MAAMG,QAClBW,YAAY,eACZC,SAAUF,KAAKxB,aACfmB,UAAU,kBAGd,yBAAKG,MAAM,OACT,4BACEC,KAAK,SACLI,QAASH,KAAKhB,aACdW,UAAU,qBAHZ,sBAaV,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sCACb,wBAAIA,UAAU,cACXK,KAAKb,MAAMC,SAASgB,KAAI,SAACC,EAAMC,GAAP,OACvB,wBACEX,UAAU,4BACVY,IAAKD,EACLH,QAAS,EAAKV,eAEbY,EACD,2BAAON,KAAK,WAAWG,SAAU,EAAKM,mBAI5C,4BACET,KAAK,SACLI,QAASH,KAAKT,aACdI,UAAU,0BAHZ,4B,GA7FMc,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f87da0d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toDoList: [\"Wake up!\", \"Brush teeth!\", \"Code\"],\n      newTask: \"\",\n      done: false\n    };\n  }\n\n  handleChange = event => {\n    console.log(\"here\");\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    console.log(\"pressed\");\n    event.preventDefault();\n    let list = [...this.state.toDoList];\n    list.push(this.state.newTask);\n    this.setState({\n      toDoList: list,\n      newTask: \"\"\n    });\n  };\n\n  handleDelete = newTask => {\n    let list = [...this.state.toDoList];\n    list.pop(this.state.newTask);\n    this.setState({\n      toDoList: list,\n      newTask: \"\"\n    });\n  };\n\n  completedTask = () => {\n    console.log(\"checked\");\n    this.setState({\n      done: true\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"text-center col-6 offset-3 mt-3 bg-danger p-3 rounded\">\n            <h3 style={{ color: \"silver\" }} className=\"mb-4\">\n              To Do List\n            </h3>\n            <hr />\n            <form>\n              <div class=\"row\">\n                <div class=\"col\">\n                  <input\n                    type=\"text\"\n                    name=\"newTask\"\n                    value={this.state.newTask}\n                    placeholder=\"Add New Task\"\n                    onChange={this.handleChange}\n                    className=\"form-control\"\n                  />\n                </div>\n                <div class=\"col\">\n                  <button\n                    type=\"submit\"\n                    onClick={this.handleSubmit}\n                    className=\"btn btn-secondary\"\n                  >\n                    Add new Task!\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-6 offset-3 p-3 bg-info rounded\">\n            <ul className=\"list-group\">\n              {this.state.toDoList.map((task, index) => (\n                <li\n                  className=\"list-group-item text-left\"\n                  key={index}\n                  onClick={this.completedTask}\n                >\n                  {task}\n                  <input type=\"checkbox\" onChange={this.Taskchecked} />\n                </li>\n              ))}\n            </ul>\n            <button\n              type=\"submit\"\n              onClick={this.handleDelete}\n              className=\"btn btn-secondary mt-3\"\n            >\n              Delete Last Task!\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}